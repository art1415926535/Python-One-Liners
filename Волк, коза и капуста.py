(lambda state, conditions: [[(lambda state: [x(state) for x in [(lambda filter_state: (lambda state: [x(state[0]) for x in [lambda state: print('Левый берег:', filter_state(state, 'left')), lambda state: print('Правый берег:', filter_state(state, 'right'))]]))((lambda state, dir: ', '.join(key for key, value in state.items() if value == dir))), lambda old_state: (lambda state, moves: state.__setitem__(0, {key: (lambda move: 'left' if move == 'right' else 'right')(value) if key in moves else value for key, value in state[0].items()}))(old_state, (lambda s: [s] if s == 'лодка' else [s, 'лодка'])(input('Кого перевезти? ')))]])(state), (lambda state: [[x(state[0], key, cond) for x in [lambda state, key, cond: cond(state) and print(key), lambda state, key, cond: cond(state) and __import__('sys').exit(0)]] for key, cond in conditions.items()])(state)] for _ in __import__('itertools').count()])([{ 'коза': 'left', 'волк': 'left', 'капуста': 'left', 'лодка': 'left' }], {'Проиграл :(': lambda state: state['коза'] == state['волк'] != state['лодка'] or state['коза'] == state['капуста'] != state['лодка'], 'Победа!': lambda state: 'left' not in state.values()})
